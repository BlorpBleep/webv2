{
  "version": 3,
  "sources": ["../../../../../../node_modules/.pnpm/@react-aria+radio@3.10.4_react@18.3.1/node_modules/@react-aria/radio/dist/packages/@react-aria/radio/src/utils.ts", "../../../../../../node_modules/.pnpm/@react-aria+radio@3.10.4_react@18.3.1/node_modules/@react-aria/radio/dist/packages/@react-aria/radio/src/useRadio.ts", "../../../../../../node_modules/.pnpm/@react-aria+radio@3.10.4_react@18.3.1/node_modules/@react-aria/radio/dist/packages/@react-aria/radio/src/useRadioGroup.ts"],
  "sourcesContent": ["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {RadioGroupState} from '@react-stately/radio';\n\ninterface RadioGroupData {\n  name: string,\n  descriptionId: string | undefined,\n  errorMessageId: string | undefined,\n  validationBehavior: 'aria' | 'native'\n}\n\nexport const radioGroupData = new WeakMap<RadioGroupState, RadioGroupData>();\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaRadioProps} from '@react-types/radio';\nimport {filterDOMProps, mergeProps, useFormReset} from '@react-aria/utils';\nimport {InputHTMLAttributes, LabelHTMLAttributes, RefObject} from 'react';\nimport {radioGroupData} from './utils';\nimport {RadioGroupState} from '@react-stately/radio';\nimport {useFocusable} from '@react-aria/focus';\nimport {useFormValidation} from '@react-aria/form';\nimport {usePress} from '@react-aria/interactions';\n\nexport interface RadioAria {\n  /** Props for the label wrapper element. */\n  labelProps: LabelHTMLAttributes<HTMLLabelElement>,\n  /** Props for the input element. */\n  inputProps: InputHTMLAttributes<HTMLInputElement>,\n  /** Whether the radio is disabled. */\n  isDisabled: boolean,\n  /** Whether the radio is currently selected. */\n  isSelected: boolean,\n  /** Whether the radio is in a pressed state. */\n  isPressed: boolean\n}\n\n/**\n * Provides the behavior and accessibility implementation for an individual\n * radio button in a radio group.\n * @param props - Props for the radio.\n * @param state - State for the radio group, as returned by `useRadioGroupState`.\n * @param ref - Ref to the HTML input element.\n */\nexport function useRadio(props: AriaRadioProps, state: RadioGroupState, ref: RefObject<HTMLInputElement>): RadioAria {\n  let {\n    value,\n    children,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledby\n  } = props;\n\n  const isDisabled = props.isDisabled || state.isDisabled;\n\n  let hasChildren = children != null;\n  let hasAriaLabel = ariaLabel != null || ariaLabelledby != null;\n  if (!hasChildren && !hasAriaLabel) {\n    console.warn('If you do not provide children, you must specify an aria-label for accessibility');\n  }\n\n  let checked = state.selectedValue === value;\n\n  let onChange = (e) => {\n    e.stopPropagation();\n    state.setSelectedValue(value);\n  };\n\n  let {pressProps, isPressed} = usePress({\n    isDisabled\n  });\n\n  // iOS does not toggle radios if you drag off and back onto the label, so handle it ourselves.\n  let {pressProps: labelProps, isPressed: isLabelPressed} = usePress({\n    isDisabled,\n    onPress() {\n      state.setSelectedValue(value);\n    }\n  });\n\n  let {focusableProps} = useFocusable(mergeProps(props, {\n    onFocus: () => state.setLastFocusedValue(value)\n  }), ref);\n  let interactions = mergeProps(pressProps, focusableProps);\n  let domProps = filterDOMProps(props, {labelable: true});\n  let tabIndex: number | undefined = -1;\n  if (state.selectedValue != null) {\n    if (state.selectedValue === value) {\n      tabIndex = 0;\n    }\n  } else if (state.lastFocusedValue === value || state.lastFocusedValue == null) {\n    tabIndex = 0;\n  }\n  if (isDisabled) {\n    tabIndex = undefined;\n  }\n\n  let {name, descriptionId, errorMessageId, validationBehavior} = radioGroupData.get(state)!;\n  useFormReset(ref, state.selectedValue, state.setSelectedValue);\n  useFormValidation({validationBehavior}, state, ref);\n\n  return {\n    labelProps: mergeProps(labelProps, {onClick: e => e.preventDefault()}),\n    inputProps: mergeProps(domProps, {\n      ...interactions,\n      type: 'radio',\n      name,\n      tabIndex,\n      disabled: isDisabled,\n      required: state.isRequired && validationBehavior === 'native',\n      checked,\n      value,\n      onChange,\n      'aria-describedby': [\n        props['aria-describedby'],\n        state.isInvalid ? errorMessageId : null,\n        descriptionId\n      ].filter(Boolean).join(' ') || undefined\n    }),\n    isDisabled,\n    isSelected: checked,\n    isPressed: isPressed || isLabelPressed\n  };\n}\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaRadioGroupProps} from '@react-types/radio';\nimport {DOMAttributes, ValidationResult} from '@react-types/shared';\nimport {filterDOMProps, mergeProps, useId} from '@react-aria/utils';\nimport {getFocusableTreeWalker} from '@react-aria/focus';\nimport {radioGroupData} from './utils';\nimport {RadioGroupState} from '@react-stately/radio';\nimport {useField} from '@react-aria/label';\nimport {useFocusWithin} from '@react-aria/interactions';\nimport {useLocale} from '@react-aria/i18n';\n\nexport interface RadioGroupAria extends ValidationResult {\n  /** Props for the radio group wrapper element. */\n  radioGroupProps: DOMAttributes,\n  /** Props for the radio group's visible label (if any). */\n  labelProps: DOMAttributes,\n  /** Props for the radio group description element, if any. */\n  descriptionProps: DOMAttributes,\n  /** Props for the radio group error message element, if any. */\n  errorMessageProps: DOMAttributes\n}\n\n/**\n * Provides the behavior and accessibility implementation for a radio group component.\n * Radio groups allow users to select a single item from a list of mutually exclusive options.\n * @param props - Props for the radio group.\n * @param state - State for the radio group, as returned by `useRadioGroupState`.\n */\nexport function useRadioGroup(props: AriaRadioGroupProps, state: RadioGroupState): RadioGroupAria {\n  let {\n    name,\n    isReadOnly,\n    isRequired,\n    isDisabled,\n    orientation = 'vertical',\n    validationBehavior = 'aria'\n  } = props;\n  let {direction} = useLocale();\n\n  let {isInvalid, validationErrors, validationDetails} = state.displayValidation;\n  let {labelProps, fieldProps, descriptionProps, errorMessageProps} = useField({\n    ...props,\n    // Radio group is not an HTML input element so it\n    // shouldn't be labeled by a <label> element.\n    labelElementType: 'span',\n    isInvalid: state.isInvalid,\n    errorMessage: props.errorMessage || validationErrors\n  });\n\n  let domProps = filterDOMProps(props, {labelable: true});\n\n  // When the radio group loses focus, reset the focusable radio to null if\n  // there is no selection. This allows tabbing into the group from either\n  // direction to go to the first or last radio.\n  let {focusWithinProps} = useFocusWithin({\n    onBlurWithin(e) {\n      props.onBlur?.(e);\n      if (!state.selectedValue) {\n        state.setLastFocusedValue(null);\n      }\n    },\n    onFocusWithin: props.onFocus,\n    onFocusWithinChange: props.onFocusChange\n  });\n\n  let onKeyDown = (e) => {\n    let nextDir;\n    switch (e.key) {\n      case 'ArrowRight':\n        if (direction === 'rtl' && orientation !== 'vertical') {\n          nextDir = 'prev';\n        } else {\n          nextDir = 'next';\n        }\n        break;\n      case 'ArrowLeft':\n        if (direction === 'rtl' && orientation !== 'vertical') {\n          nextDir = 'next';\n        } else {\n          nextDir = 'prev';\n        }\n        break;\n      case 'ArrowDown':\n        nextDir = 'next';\n        break;\n      case 'ArrowUp':\n        nextDir = 'prev';\n        break;\n      default:\n        return;\n    }\n    e.preventDefault();\n    let walker = getFocusableTreeWalker(e.currentTarget, {from: e.target});\n    let nextElem;\n    if (nextDir === 'next') {\n      nextElem = walker.nextNode();\n      if (!nextElem) {\n        walker.currentNode = e.currentTarget;\n        nextElem = walker.firstChild();\n      }\n    } else {\n      nextElem = walker.previousNode();\n      if (!nextElem) {\n        walker.currentNode = e.currentTarget;\n        nextElem = walker.lastChild();\n      }\n    }\n    if (nextElem) {\n      // Call focus on nextElem so that keyboard navigation scrolls the radio into view\n      nextElem.focus();\n      state.setSelectedValue(nextElem.value);\n    }\n  };\n\n  let groupName = useId(name);\n  radioGroupData.set(state, {\n    name: groupName,\n    descriptionId: descriptionProps.id,\n    errorMessageId: errorMessageProps.id,\n    validationBehavior\n  });\n\n  return {\n    radioGroupProps: mergeProps(domProps, {\n      // https://www.w3.org/TR/wai-aria-1.2/#radiogroup\n      role: 'radiogroup',\n      onKeyDown,\n      'aria-invalid': state.isInvalid || undefined,\n      'aria-errormessage': props['aria-errormessage'],\n      'aria-readonly': isReadOnly || undefined,\n      'aria-required': isRequired || undefined,\n      'aria-disabled': isDisabled || undefined,\n      'aria-orientation': orientation,\n      ...fieldProps,\n      ...focusWithinProps\n    }),\n    labelProps,\n    descriptionProps,\n    errorMessageProps,\n    isInvalid,\n    validationErrors,\n    validationDetails\n  };\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqBO,IAAM,4CAAiB,oBAAI,QAAA;;;ACoB3B,SAAS,0CAAS,OAAuB,OAAwB,KAAgC;AACtG,MAAI,EAAA,OACG,UAEL,cAAc,WACd,mBAAmB,eAAc,IAC/B;AAEJ,QAAM,aAAa,MAAM,cAAc,MAAM;AAE7C,MAAI,cAAc,YAAY;AAC9B,MAAI,eAAe,aAAa,QAAQ,kBAAkB;AAC1D,MAAI,CAAC,eAAe,CAAC;AACnB,YAAQ,KAAK,kFAAA;AAGf,MAAI,UAAU,MAAM,kBAAkB;AAEtC,MAAI,WAAW,CAAC,MAAA;AACd,MAAE,gBAAe;AACjB,UAAM,iBAAiB,KAAA;EACzB;AAEA,MAAI,EAAA,YAAW,UAAW,KAAI,GAAA,2CAAS;;EAEvC,CAAA;AAGA,MAAI,EAAC,YAAY,YAAY,WAAW,eAAc,KAAI,GAAA,2CAAS;;IAEjE,UAAA;AACE,YAAM,iBAAiB,KAAA;IACzB;EACF,CAAA;AAEA,MAAI,EAAA,eAAe,KAAI,GAAA,4CAAa,GAAA,2CAAW,OAAO;IACpD,SAAS,MAAM,MAAM,oBAAoB,KAAA;EAC3C,CAAA,GAAI,GAAA;AACJ,MAAI,gBAAe,GAAA,2CAAW,YAAY,cAAA;AAC1C,MAAI,YAAW,GAAA,2CAAe,OAAO;IAAC,WAAW;EAAI,CAAA;AACrD,MAAI,WAA+B;AACnC,MAAI,MAAM,iBAAiB,MACzB;AAAA,QAAI,MAAM,kBAAkB;AAC1B,iBAAW;EACb,WACS,MAAM,qBAAqB,SAAS,MAAM,oBAAoB;AACvE,eAAW;AAEb,MAAI;AACF,eAAW;AAGb,MAAI,EAAA,MAAK,eAAe,gBAAgB,mBAAoB,KAAI,GAAA,2CAAe,IAAI,KAAA;AACnF,GAAA,GAAA,2CAAa,KAAK,MAAM,eAAe,MAAM,gBAAgB;AAC7D,GAAA,GAAA,2CAAkB;;EAAmB,GAAG,OAAO,GAAA;AAE/C,SAAO;IACL,aAAY,GAAA,2CAAW,YAAY;MAAC,SAAS,CAAA,MAAK,EAAE,eAAc;IAAE,CAAA;IACpE,aAAY,GAAA,2CAAW,UAAU;MAC/B,GAAG;MACH,MAAM;;;MAGN,UAAU;MACV,UAAU,MAAM,cAAc,uBAAuB;;;;MAIrD,oBAAoB;QAClB,MAAM,kBAAA;QACN,MAAM,YAAY,iBAAiB;QACnC;QACA,OAAO,OAAA,EAAS,KAAK,GAAA,KAAQ;IACjC,CAAA;;IAEA,YAAY;IACZ,WAAW,aAAa;EAC1B;AACF;;;AChFO,SAAS,0CAAc,OAA4B,OAAsB;AAC9E,MAAI,EAAA,MACE,YACM,YACA,YACA,cACI,YAAA,qBACO,OAAA,IACnB;AACJ,MAAI,EAAA,UAAU,KAAI,GAAA,2CAAQ;AAE1B,MAAI,EAAA,WAAU,kBAAkB,kBAAmB,IAAI,MAAM;AAC7D,MAAI,EAAA,YAAW,YAAY,kBAAkB,kBAAmB,KAAI,GAAA,2CAAS;IAC3E,GAAG;;;IAGH,kBAAkB;IAClB,WAAW,MAAM;IACjB,cAAc,MAAM,gBAAgB;EACtC,CAAA;AAEA,MAAI,YAAW,GAAA,2CAAe,OAAO;IAAC,WAAW;EAAI,CAAA;AAKrD,MAAI,EAAA,iBAAiB,KAAI,GAAA,2CAAe;IACtC,aAAa,GAAC;UACZ;OAAA,gBAAA,MAAM,YAAM,QAAZ,kBAAA,SAAA,SAAA,cAAA,KAAA,OAAe,CAAA;AACf,UAAI,CAAC,MAAM;AACT,cAAM,oBAAoB,IAAA;IAE9B;IACA,eAAe,MAAM;IACrB,qBAAqB,MAAM;EAC7B,CAAA;AAEA,MAAI,YAAY,CAAC,MAAA;AACf,QAAI;AACJ,YAAQ,EAAE,KAAG;MACX,KAAK;AACH,YAAI,cAAc,SAAS,gBAAgB;AACzC,oBAAU;;AAEV,oBAAU;AAEZ;MACF,KAAK;AACH,YAAI,cAAc,SAAS,gBAAgB;AACzC,oBAAU;;AAEV,oBAAU;AAEZ;MACF,KAAK;AACH,kBAAU;AACV;MACF,KAAK;AACH,kBAAU;AACV;MACF;AACE;IACJ;AACA,MAAE,eAAc;AAChB,QAAI,UAAS,GAAA,2CAAuB,EAAE,eAAe;MAAC,MAAM,EAAE;IAAM,CAAA;AACpE,QAAI;AACJ,QAAI,YAAY,QAAQ;AACtB,iBAAW,OAAO,SAAQ;AAC1B,UAAI,CAAC,UAAU;AACb,eAAO,cAAc,EAAE;AACvB,mBAAW,OAAO,WAAU;MAC9B;IACF,OAAO;AACL,iBAAW,OAAO,aAAY;AAC9B,UAAI,CAAC,UAAU;AACb,eAAO,cAAc,EAAE;AACvB,mBAAW,OAAO,UAAS;MAC7B;IACF;AACA,QAAI,UAAU;AAEZ,eAAS,MAAK;AACd,YAAM,iBAAiB,SAAS,KAAK;IACvC;EACF;AAEA,MAAI,aAAY,GAAA,2CAAM,IAAA;AACtB,GAAA,GAAA,2CAAe,IAAI,OAAO;IACxB,MAAM;IACN,eAAe,iBAAiB;IAChC,gBAAgB,kBAAkB;;EAEpC,CAAA;AAEA,SAAO;IACL,kBAAiB,GAAA,2CAAW,UAAU;;MAEpC,MAAM;;MAEN,gBAAgB,MAAM,aAAa;MACnC,qBAAqB,MAAM,mBAAA;MAC3B,iBAAiB,cAAc;MAC/B,iBAAiB,cAAc;MAC/B,iBAAiB,cAAc;MAC/B,oBAAoB;MACpB,GAAG;MACH,GAAG;IACL,CAAA;;;;;;;EAOF;AACF;",
  "names": []
}
