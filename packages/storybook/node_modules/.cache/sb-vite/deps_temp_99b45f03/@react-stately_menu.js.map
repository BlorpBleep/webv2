{
  "version": 3,
  "sources": ["../../../../../../node_modules/.pnpm/@react-stately+menu@3.7.1_react@18.3.1/node_modules/@react-stately/menu/dist/packages/@react-stately/menu/src/useMenuTriggerState.ts", "../../../../../../node_modules/.pnpm/@react-stately+menu@3.7.1_react@18.3.1/node_modules/@react-stately/menu/dist/packages/@react-stately/menu/src/useSubmenuTriggerState.ts"],
  "sourcesContent": ["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FocusStrategy, Key} from '@react-types/shared';\nimport {MenuTriggerProps} from '@react-types/menu';\nimport {OverlayTriggerState, useOverlayTriggerState} from '@react-stately/overlays';\nimport {useState} from 'react';\n\nexport interface MenuTriggerState extends OverlayTriggerState {\n  /** Controls which item will be auto focused when the menu opens. */\n  readonly focusStrategy: FocusStrategy,\n\n  /** Opens the menu. */\n  open(focusStrategy?: FocusStrategy | null): void,\n\n  /** Toggles the menu. */\n  toggle(focusStrategy?: FocusStrategy | null): void\n}\n\nexport interface RootMenuTriggerState extends MenuTriggerState {\n  /** Opens a specific submenu tied to a specific menu item at a specific level. */\n  openSubmenu: (triggerKey: Key, level: number) => void,\n\n  /** Closes a specific submenu tied to a specific menu item at a specific level. */\n  closeSubmenu: (triggerKey: Key, level: number) => void,\n\n  /** An array of open submenu trigger keys within the menu tree.\n   * The index of key within array matches the submenu level in the tree.\n   */\n  expandedKeysStack: Key[],\n\n  /** Closes the menu and all submenus in the menu tree. */\n  close: () => void\n}\n\n/**\n * Manages state for a menu trigger. Tracks whether the menu is currently open,\n * and controls which item will receive focus when it opens. Also tracks the open submenus within\n * the menu tree via their trigger keys.\n */\nexport function useMenuTriggerState(props: MenuTriggerProps): RootMenuTriggerState  {\n  let overlayTriggerState = useOverlayTriggerState(props);\n  let [focusStrategy, setFocusStrategy] = useState<FocusStrategy>(null);\n  let [expandedKeysStack, setExpandedKeysStack] = useState<Key[]>([]);\n\n  let closeAll = () => {\n    setExpandedKeysStack([]);\n    overlayTriggerState.close();\n  };\n\n  let openSubmenu = (triggerKey: Key, level: number) => {\n    setExpandedKeysStack(oldStack => {\n      if (level > oldStack.length) {\n        return oldStack;\n      }\n\n      return [...oldStack.slice(0, level), triggerKey];\n    });\n  };\n\n  let closeSubmenu = (triggerKey: Key, level: number) => {\n    setExpandedKeysStack(oldStack => {\n      let key = oldStack[level];\n      if (key === triggerKey) {\n        return oldStack.slice(0, level);\n      } else {\n        return oldStack;\n      }\n    });\n  };\n\n  return {\n    focusStrategy,\n    ...overlayTriggerState,\n    open(focusStrategy: FocusStrategy = null) {\n      setFocusStrategy(focusStrategy);\n      overlayTriggerState.open();\n    },\n    toggle(focusStrategy: FocusStrategy = null) {\n      setFocusStrategy(focusStrategy);\n      overlayTriggerState.toggle();\n    },\n    close() {\n      closeAll();\n    },\n    expandedKeysStack,\n    openSubmenu,\n    closeSubmenu\n  };\n}\n", "/*\n * Copyright 2023 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FocusStrategy, Key} from '@react-types/shared';\nimport type {OverlayTriggerState} from '@react-stately/overlays';\nimport {RootMenuTriggerState} from './useMenuTriggerState';\nimport {useCallback, useMemo, useState} from 'react';\n\nexport interface SubmenuTriggerProps {\n  /** Key of the trigger item. */\n  triggerKey: Key\n}\n\nexport interface SubmenuTriggerState extends OverlayTriggerState {\n  /** Whether the submenu is currently open. */\n  isOpen: boolean,\n  /** Controls which item will be auto focused when the submenu opens. */\n  focusStrategy: FocusStrategy | null,\n  /** Opens the submenu. */\n  open: (focusStrategy?: FocusStrategy | null) => void,\n  /** Closes the submenu. */\n  close: () => void,\n  /** Closes all menus and submenus in the menu tree. */\n  closeAll: () => void,\n  /** The level of the submenu. */\n  submenuLevel: number,\n  /** Toggles the submenu. */\n  toggle: (focusStrategy?: FocusStrategy | null) => void,\n  /** @private */\n  setOpen: () => void\n}\n\n/**\n * Manages state for a submenu trigger. Tracks whether the submenu is currently open, the level of the submenu, and\n * controls which item will receive focus when it opens.\n */\nexport function useSubmenuTriggerState(props: SubmenuTriggerProps, state: RootMenuTriggerState): SubmenuTriggerState  {\n  let {triggerKey} = props;\n  let {expandedKeysStack, openSubmenu, closeSubmenu, close: closeAll} = state;\n  let [submenuLevel] = useState(expandedKeysStack?.length);\n  let isOpen = useMemo(() => expandedKeysStack[submenuLevel] === triggerKey, [expandedKeysStack, triggerKey, submenuLevel]);\n  let [focusStrategy, setFocusStrategy] = useState<FocusStrategy>(null);\n\n  let open = useCallback((focusStrategy: FocusStrategy = null) => {\n    setFocusStrategy(focusStrategy);\n    openSubmenu(triggerKey, submenuLevel);\n  }, [openSubmenu, submenuLevel, triggerKey]);\n\n  let close = useCallback(() => {\n    setFocusStrategy(null);\n    closeSubmenu(triggerKey, submenuLevel);\n  }, [closeSubmenu, submenuLevel, triggerKey]);\n\n  let toggle = useCallback((focusStrategy: FocusStrategy = null) => {\n    setFocusStrategy(focusStrategy);\n    if (isOpen) {\n      close();\n    } else {\n      open(focusStrategy);\n    }\n  }, [close, open, isOpen]);\n\n  return useMemo(() => ({\n    focusStrategy,\n    isOpen,\n    open,\n    close,\n    closeAll,\n    submenuLevel,\n    // TODO: Placeholders that aren't used but give us parity with OverlayTriggerState so we can use this in Popover. Refactor if we update Popover via\n    // https://github.com/adobe/react-spectrum/pull/4976#discussion_r1336472863\n    setOpen: () => {},\n    toggle\n  }), [isOpen, open, close, closeAll, focusStrategy, toggle, submenuLevel]);\n}\n"],
  "mappings": ";;;;;;;;;;;;;AAiDO,SAAS,0CAAoB,OAAuB;AACzD,MAAI,uBAAsB,GAAA,2CAAuB,KAAA;AACjD,MAAI,CAAC,eAAe,gBAAA,KAAoB,GAAA,aAAAA,UAAwB,IAAA;AAChE,MAAI,CAAC,mBAAmB,oBAAA,KAAwB,GAAA,aAAAA,UAAgB,CAAA,CAAE;AAElE,MAAI,WAAW,MAAA;AACb,yBAAqB,CAAA,CAAE;AACvB,wBAAoB,MAAK;EAC3B;AAEA,MAAI,cAAc,CAAC,YAAiB,UAAA;AAClC,yBAAqB,CAAA,aAAA;AACnB,UAAI,QAAQ,SAAS;AACnB,eAAO;AAGT,aAAO;WAAI,SAAS,MAAM,GAAG,KAAA;QAAQ;;IACvC,CAAA;EACF;AAEA,MAAI,eAAe,CAAC,YAAiB,UAAA;AACnC,yBAAqB,CAAA,aAAA;AACnB,UAAI,MAAM,SAAS,KAAA;AACnB,UAAI,QAAQ;AACV,eAAO,SAAS,MAAM,GAAG,KAAA;;AAEzB,eAAO;IAEX,CAAA;EACF;AAEA,SAAO;;IAEL,GAAG;IACH,KAAKC,iBAA+B,MAAI;AACtC,uBAAiBA,cAAA;AACjB,0BAAoB,KAAI;IAC1B;IACA,OAAOA,iBAA+B,MAAI;AACxC,uBAAiBA,cAAA;AACjB,0BAAoB,OAAM;IAC5B;IACA,QAAA;AACE,eAAA;IACF;;;;EAIF;AACF;;;;ACrDO,SAAS,0CAAuB,OAA4B,OAA2B;AAC5F,MAAI,EAAA,WAAW,IAAI;AACnB,MAAI,EAAA,mBAAkB,aAAa,cAAgB,OAAO,SAAQ,IAAI;AACtE,MAAI,CAAC,YAAA,KAAgB,GAAA,cAAAC,UAAS,sBAAA,QAAA,sBAAA,SAAA,SAAA,kBAAmB,MAAM;AACvD,MAAI,UAAS,GAAA,cAAAC,SAAQ,MAAM,kBAAkB,YAAA,MAAkB,YAAY;IAAC;IAAmB;IAAY;GAAa;AACxH,MAAI,CAAC,eAAe,gBAAA,KAAoB,GAAA,cAAAD,UAAwB,IAAA;AAEhE,MAAI,QAAO,GAAA,cAAAE,aAAY,CAACC,iBAA+B,SAAI;AACzD,qBAAiBA,cAAA;AACjB,gBAAY,YAAY,YAAA;EAC1B,GAAG;IAAC;IAAa;IAAc;GAAW;AAE1C,MAAI,SAAQ,GAAA,cAAAD,aAAY,MAAA;AACtB,qBAAiB,IAAA;AACjB,iBAAa,YAAY,YAAA;EAC3B,GAAG;IAAC;IAAc;IAAc;GAAW;AAE3C,MAAI,UAAS,GAAA,cAAAA,aAAY,CAACC,iBAA+B,SAAI;AAC3D,qBAAiBA,cAAA;AACjB,QAAI;AACF,YAAA;;AAEA,WAAKA,cAAA;EAET,GAAG;IAAC;IAAO;IAAM;GAAO;AAExB,UAAO,GAAA,cAAAF,SAAQ,OAAO;;;;;;;;;IASpB,SAAS,MAAA;IAAO;;EAElB,IAAI;IAAC;IAAQ;IAAM;IAAO;IAAU;IAAe;IAAQ;GAAa;AAC1E;",
  "names": ["$8bn9m$useState", "focusStrategy", "$7exkJ$useState", "$7exkJ$useMemo", "$7exkJ$useCallback", "focusStrategy"]
}
