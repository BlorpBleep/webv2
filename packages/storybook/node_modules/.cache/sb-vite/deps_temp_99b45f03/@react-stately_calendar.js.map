{
  "version": 3,
  "sources": ["../../../../../../node_modules/.pnpm/@react-stately+calendar@3.5.1_react@18.3.1/node_modules/@react-stately/calendar/dist/packages/@react-stately/calendar/src/utils.ts", "../../../../../../node_modules/.pnpm/@react-stately+calendar@3.5.1_react@18.3.1/node_modules/@react-stately/calendar/dist/packages/@react-stately/calendar/src/useCalendarState.ts", "../../../../../../node_modules/.pnpm/@react-stately+calendar@3.5.1_react@18.3.1/node_modules/@react-stately/calendar/dist/packages/@react-stately/calendar/src/useRangeCalendarState.ts"],
  "sourcesContent": ["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nimport {\n  CalendarDate,\n  DateDuration,\n  maxDate,\n  minDate,\n  startOfMonth,\n  startOfWeek,\n  startOfYear,\n  toCalendarDate\n} from '@internationalized/date';\nimport {DateValue} from '@react-types/calendar';\n\nexport function isInvalid(date: DateValue, minValue: DateValue, maxValue: DateValue) {\n  return (minValue != null && date.compare(minValue) < 0) ||\n    (maxValue != null && date.compare(maxValue) > 0);\n}\n\nexport function alignCenter(date: CalendarDate, duration: DateDuration, locale: string, minValue?: DateValue, maxValue?: DateValue) {\n  let halfDuration: DateDuration = {};\n  for (let key in duration) {\n    halfDuration[key] = Math.floor(duration[key] / 2);\n    if (halfDuration[key] > 0 && duration[key] % 2 === 0) {\n      halfDuration[key]--;\n    }\n  }\n\n  let aligned = alignStart(date, duration, locale).subtract(halfDuration);\n  return constrainStart(date, aligned, duration, locale, minValue, maxValue);\n}\n\nexport function alignStart(date: CalendarDate, duration: DateDuration, locale: string, minValue?: DateValue, maxValue?: DateValue) {\n  // align to the start of the largest unit\n  let aligned = date;\n  if (duration.years) {\n    aligned = startOfYear(date);\n  } else if (duration.months) {\n    aligned = startOfMonth(date);\n  } else if (duration.weeks) {\n    aligned = startOfWeek(date, locale);\n  }\n\n  return constrainStart(date, aligned, duration, locale, minValue, maxValue);\n}\n\nexport function alignEnd(date: CalendarDate, duration: DateDuration, locale: string, minValue?: DateValue, maxValue?: DateValue) {\n  let d = {...duration};\n  // subtract 1 from the smallest unit\n  if (duration.days) {\n    d.days--;\n  } else if (duration.weeks) {\n    d.weeks--;\n  } else if (duration.months) {\n    d.months--;\n  } else if (duration.years) {\n    d.years--;\n  }\n\n  let aligned = alignStart(date, duration, locale).subtract(d);\n  return constrainStart(date, aligned, duration, locale, minValue, maxValue);\n}\n\nexport function constrainStart(\n  date: CalendarDate,\n  aligned: CalendarDate,\n  duration: DateDuration,\n  locale: string,\n  minValue: DateValue,\n  maxValue: DateValue) {\n  if (minValue && date.compare(minValue) >= 0) {\n    aligned = maxDate(\n      aligned,\n      alignStart(toCalendarDate(minValue), duration, locale)\n    );\n  }\n\n  if (maxValue && date.compare(maxValue) <= 0) {\n    aligned = minDate(\n      aligned,\n      alignEnd(toCalendarDate(maxValue), duration, locale)\n    );\n  }\n\n  return aligned;\n}\n\nexport function constrainValue(date: CalendarDate, minValue: DateValue, maxValue: DateValue) {\n  if (minValue) {\n    date = maxDate(date, toCalendarDate(minValue));\n  }\n\n  if (maxValue) {\n    date = minDate(date, toCalendarDate(maxValue));\n  }\n\n  return date;\n}\n\nexport function previousAvailableDate(date: CalendarDate, minValue: DateValue, isDateUnavailable: (date: CalendarDate) => boolean) {\n  if (!isDateUnavailable) {\n    return date;\n  }\n\n  while (date.compare(minValue) >= 0 && isDateUnavailable(date)) {\n    date = date.subtract({days: 1});\n  }\n\n  if (date.compare(minValue) >= 0) {\n    return date;\n  }\n}\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {alignCenter, alignEnd, alignStart, constrainStart, constrainValue, isInvalid, previousAvailableDate} from './utils';\nimport {\n  Calendar,\n  CalendarDate,\n  DateDuration,\n  DateFormatter,\n  endOfMonth,\n  endOfWeek,\n  getDayOfWeek,\n  GregorianCalendar,\n  isSameDay,\n  startOfMonth,\n  startOfWeek,\n  toCalendar,\n  toCalendarDate,\n  today\n} from '@internationalized/date';\nimport {CalendarProps, DateValue} from '@react-types/calendar';\nimport {CalendarState} from './types';\nimport {useControlledState} from '@react-stately/utils';\nimport {useMemo, useState} from 'react';\nimport {ValidationState} from '@react-types/shared';\n\nexport interface CalendarStateOptions<T extends DateValue = DateValue> extends CalendarProps<T> {\n  /** The locale to display and edit the value according to. */\n  locale: string,\n  /**\n   * A function that creates a [Calendar](../internationalized/date/Calendar.html)\n   * object for a given calendar identifier. Such a function may be imported from the\n   * `@internationalized/date` package, or manually implemented to include support for\n   * only certain calendars.\n   */\n  createCalendar: (name: string) => Calendar,\n  /**\n   * The amount of days that will be displayed at once. This affects how pagination works.\n   * @default {months: 1}\n   */\n  visibleDuration?: DateDuration,\n  /** Determines how to align the initial selection relative to the visible date range. */\n  selectionAlignment?: 'start' | 'center' | 'end'\n}\n\n/**\n * Provides state management for a calendar component.\n * A calendar displays one or more date grids and allows users to select a single date.\n */\nexport function useCalendarState<T extends DateValue = DateValue>(props: CalendarStateOptions<T>): CalendarState {\n  let defaultFormatter = useMemo(() => new DateFormatter(props.locale), [props.locale]);\n  let resolvedOptions = useMemo(() => defaultFormatter.resolvedOptions(), [defaultFormatter]);\n  let {\n    locale,\n    createCalendar,\n    visibleDuration = {months: 1},\n    minValue,\n    maxValue,\n    selectionAlignment,\n    isDateUnavailable,\n    pageBehavior = 'visible'\n  } = props;\n  let calendar = useMemo(() => createCalendar(resolvedOptions.calendar), [createCalendar, resolvedOptions.calendar]);\n\n  let [value, setControlledValue] = useControlledState<DateValue>(props.value, props.defaultValue, props.onChange);\n  let calendarDateValue = useMemo(() => value ? toCalendar(toCalendarDate(value), calendar) : null, [value, calendar]);\n  let timeZone = useMemo(() => value && 'timeZone' in value ? value.timeZone : resolvedOptions.timeZone, [value, resolvedOptions.timeZone]);\n  let focusedCalendarDate = useMemo(() => (\n    props.focusedValue\n      ? constrainValue(toCalendar(toCalendarDate(props.focusedValue), calendar), minValue, maxValue)\n      : undefined\n  ), [props.focusedValue, calendar, minValue, maxValue]);\n  let defaultFocusedCalendarDate = useMemo(() => (\n    constrainValue(\n      props.defaultFocusedValue\n        ? toCalendar(toCalendarDate(props.defaultFocusedValue), calendar)\n        : calendarDateValue || toCalendar(today(timeZone), calendar),\n      minValue,\n      maxValue\n    )\n  ), [props.defaultFocusedValue, calendarDateValue, timeZone, calendar, minValue, maxValue]);\n  let [focusedDate, setFocusedDate] = useControlledState(focusedCalendarDate, defaultFocusedCalendarDate, props.onFocusChange);\n  let [startDate, setStartDate] = useState(() => {\n    switch (selectionAlignment) {\n      case 'start':\n        return alignStart(focusedDate, visibleDuration, locale, minValue, maxValue);\n      case 'end':\n        return alignEnd(focusedDate, visibleDuration, locale, minValue, maxValue);\n      case 'center':\n      default:\n        return alignCenter(focusedDate, visibleDuration, locale, minValue, maxValue);\n    }\n  });\n  let [isFocused, setFocused] = useState(props.autoFocus || false);\n\n  let endDate = useMemo(() => {\n    let duration = {...visibleDuration};\n    if (duration.days) {\n      duration.days--;\n    } else {\n      duration.days = -1;\n    }\n    return startDate.add(duration);\n  }, [startDate, visibleDuration]);\n\n  // Reset focused date and visible range when calendar changes.\n  let [lastCalendarIdentifier, setLastCalendarIdentifier] = useState(calendar.identifier);\n  if (calendar.identifier !== lastCalendarIdentifier) {\n    let newFocusedDate = toCalendar(focusedDate, calendar);\n    setStartDate(alignCenter(newFocusedDate, visibleDuration, locale, minValue, maxValue));\n    setFocusedDate(newFocusedDate);\n    setLastCalendarIdentifier(calendar.identifier);\n  }\n\n  if (isInvalid(focusedDate, minValue, maxValue)) {\n    // If the focused date was moved to an invalid value, it can't be focused, so constrain it.\n    setFocusedDate(constrainValue(focusedDate, minValue, maxValue));\n  } else if (focusedDate.compare(startDate) < 0) {\n    setStartDate(alignEnd(focusedDate, visibleDuration, locale, minValue, maxValue));\n  } else if (focusedDate.compare(endDate) > 0) {\n    setStartDate(alignStart(focusedDate, visibleDuration, locale, minValue, maxValue));\n  }\n\n  // Sets focus to a specific cell date\n  function focusCell(date: CalendarDate) {\n    date = constrainValue(date, minValue, maxValue);\n    setFocusedDate(date);\n  }\n\n  function setValue(newValue: CalendarDate | null) {\n    if (!props.isDisabled && !props.isReadOnly) {\n      if (newValue === null) {\n        setControlledValue(null);\n        return;\n      }\n      newValue = constrainValue(newValue, minValue, maxValue);\n      newValue = previousAvailableDate(newValue, startDate, isDateUnavailable);\n      if (!newValue) {\n        return;\n      }\n\n      // The display calendar should not have any effect on the emitted value.\n      // Emit dates in the same calendar as the original value, if any, otherwise gregorian.\n      newValue = toCalendar(newValue, value?.calendar || new GregorianCalendar());\n\n      // Preserve time if the input value had one.\n      if (value && 'hour' in value) {\n        setControlledValue(value.set(newValue));\n      } else {\n        setControlledValue(newValue);\n      }\n    }\n  }\n\n  let isUnavailable = useMemo(() => {\n    if (!calendarDateValue) {\n      return false;\n    }\n\n    if (isDateUnavailable && isDateUnavailable(calendarDateValue)) {\n      return true;\n    }\n\n    return isInvalid(calendarDateValue, minValue, maxValue);\n  }, [calendarDateValue, isDateUnavailable, minValue, maxValue]);\n  let isValueInvalid = props.isInvalid || props.validationState === 'invalid' || isUnavailable;\n  let validationState: ValidationState = isValueInvalid ? 'invalid' : null;\n\n  let pageDuration = useMemo(() => {\n    if (pageBehavior === 'visible') {\n      return visibleDuration;\n    }\n\n    return unitDuration(visibleDuration);\n  }, [pageBehavior, visibleDuration]);\n\n  return {\n    isDisabled: props.isDisabled,\n    isReadOnly: props.isReadOnly,\n    value: calendarDateValue,\n    setValue,\n    visibleRange: {\n      start: startDate,\n      end: endDate\n    },\n    minValue,\n    maxValue,\n    focusedDate,\n    timeZone,\n    validationState,\n    isValueInvalid,\n    setFocusedDate(date) {\n      focusCell(date);\n      setFocused(true);\n    },\n    focusNextDay() {\n      focusCell(focusedDate.add({days: 1}));\n    },\n    focusPreviousDay() {\n      focusCell(focusedDate.subtract({days: 1}));\n    },\n    focusNextRow() {\n      if (visibleDuration.days) {\n        this.focusNextPage();\n      } else if (visibleDuration.weeks || visibleDuration.months || visibleDuration.years) {\n        focusCell(focusedDate.add({weeks: 1}));\n      }\n    },\n    focusPreviousRow() {\n      if (visibleDuration.days) {\n        this.focusPreviousPage();\n      } else if (visibleDuration.weeks || visibleDuration.months || visibleDuration.years) {\n        focusCell(focusedDate.subtract({weeks: 1}));\n      }\n    },\n    focusNextPage() {\n      let start = startDate.add(pageDuration);\n      setFocusedDate(constrainValue(focusedDate.add(pageDuration), minValue, maxValue));\n      setStartDate(\n        alignStart(\n          constrainStart(focusedDate, start, pageDuration, locale, minValue, maxValue),\n          pageDuration,\n          locale\n        )\n      );\n    },\n    focusPreviousPage() {\n      let start = startDate.subtract(pageDuration);\n      setFocusedDate(constrainValue(focusedDate.subtract(pageDuration), minValue, maxValue));\n      setStartDate(\n        alignStart(\n          constrainStart(focusedDate, start, pageDuration, locale, minValue, maxValue),\n          pageDuration,\n          locale\n        )\n      );\n    },\n    focusSectionStart() {\n      if (visibleDuration.days) {\n        focusCell(startDate);\n      } else if (visibleDuration.weeks) {\n        focusCell(startOfWeek(focusedDate, locale));\n      } else if (visibleDuration.months || visibleDuration.years) {\n        focusCell(startOfMonth(focusedDate));\n      }\n    },\n    focusSectionEnd() {\n      if (visibleDuration.days) {\n        focusCell(endDate);\n      } else if (visibleDuration.weeks) {\n        focusCell(endOfWeek(focusedDate, locale));\n      } else if (visibleDuration.months || visibleDuration.years) {\n        focusCell(endOfMonth(focusedDate));\n      }\n    },\n    focusNextSection(larger) {\n      if (!larger && !visibleDuration.days) {\n        focusCell(focusedDate.add(unitDuration(visibleDuration)));\n        return;\n      }\n\n      if (visibleDuration.days) {\n        this.focusNextPage();\n      } else if (visibleDuration.weeks) {\n        focusCell(focusedDate.add({months: 1}));\n      } else if (visibleDuration.months || visibleDuration.years) {\n        focusCell(focusedDate.add({years: 1}));\n      }\n    },\n    focusPreviousSection(larger) {\n      if (!larger && !visibleDuration.days) {\n        focusCell(focusedDate.subtract(unitDuration(visibleDuration)));\n        return;\n      }\n\n      if (visibleDuration.days) {\n        this.focusPreviousPage();\n      } else if (visibleDuration.weeks) {\n        focusCell(focusedDate.subtract({months: 1}));\n      } else if (visibleDuration.months || visibleDuration.years) {\n        focusCell(focusedDate.subtract({years: 1}));\n      }\n    },\n    selectFocusedDate() {\n      setValue(focusedDate);\n    },\n    selectDate(date) {\n      setValue(date);\n    },\n    isFocused,\n    setFocused,\n    isInvalid(date) {\n      return isInvalid(date, minValue, maxValue);\n    },\n    isSelected(date) {\n      return calendarDateValue != null && isSameDay(date, calendarDateValue) && !this.isCellDisabled(date) && !this.isCellUnavailable(date);\n    },\n    isCellFocused(date) {\n      return isFocused && focusedDate && isSameDay(date, focusedDate);\n    },\n    isCellDisabled(date) {\n      return props.isDisabled || date.compare(startDate) < 0 || date.compare(endDate) > 0 || this.isInvalid(date, minValue, maxValue);\n    },\n    isCellUnavailable(date) {\n      return props.isDateUnavailable && props.isDateUnavailable(date);\n    },\n    isPreviousVisibleRangeInvalid() {\n      let prev = startDate.subtract({days: 1});\n      return isSameDay(prev, startDate) || this.isInvalid(prev, minValue, maxValue);\n    },\n    isNextVisibleRangeInvalid() {\n      // Adding may return the same date if we reached the end of time\n      // according to the calendar system (e.g. 9999-12-31).\n      let next = endDate.add({days: 1});\n      return isSameDay(next, endDate) || this.isInvalid(next, minValue, maxValue);\n    },\n    getDatesInWeek(weekIndex, from = startDate) {\n      // let date = startOfWeek(from, locale);\n      let date = from.add({weeks: weekIndex});\n      let dates = [];\n\n      date = startOfWeek(date, locale);\n\n      // startOfWeek will clamp dates within the calendar system's valid range, which may\n      // start in the middle of a week. In this case, add null placeholders.\n      let dayOfWeek = getDayOfWeek(date, locale);\n      for (let i = 0; i < dayOfWeek; i++) {\n        dates.push(null);\n      }\n\n      while (dates.length < 7) {\n        dates.push(date);\n        let nextDate = date.add({days: 1});\n        if (isSameDay(date, nextDate)) {\n          // If the next day is the same, we have hit the end of the calendar system.\n          break;\n        }\n        date = nextDate;\n      }\n\n      // Add null placeholders if at the end of the calendar system.\n      while (dates.length < 7) {\n        dates.push(null);\n      }\n\n      return dates;\n    }\n  };\n}\n\nfunction unitDuration(duration: DateDuration) {\n  let unit = {...duration};\n  for (let key in duration) {\n    unit[key] = 1;\n  }\n  return unit;\n}\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {alignCenter, constrainValue, isInvalid, previousAvailableDate} from './utils';\nimport {Calendar, CalendarDate, DateDuration, GregorianCalendar, isEqualDay, maxDate, minDate, toCalendar, toCalendarDate} from '@internationalized/date';\nimport {CalendarState, RangeCalendarState} from './types';\nimport {DateRange, DateValue, RangeCalendarProps} from '@react-types/calendar';\nimport {RangeValue, ValidationState} from '@react-types/shared';\nimport {useCalendarState} from './useCalendarState';\nimport {useControlledState} from '@react-stately/utils';\nimport {useMemo, useRef, useState} from 'react';\n\nexport interface RangeCalendarStateOptions<T extends DateValue = DateValue> extends RangeCalendarProps<T> {\n  /** The locale to display and edit the value according to. */\n  locale: string,\n  /**\n   * A function that creates a [Calendar](../internationalized/date/Calendar.html)\n   * object for a given calendar identifier. Such a function may be imported from the\n   * `@internationalized/date` package, or manually implemented to include support for\n   * only certain calendars.\n   */\n  createCalendar: (name: string) => Calendar,\n  /**\n   * The amount of days that will be displayed at once. This affects how pagination works.\n   * @default {months: 1}\n   */\n  visibleDuration?: DateDuration\n}\n\n/**\n * Provides state management for a range calendar component.\n * A range calendar displays one or more date grids and allows users to select a contiguous range of dates.\n */\nexport function useRangeCalendarState<T extends DateValue = DateValue>(props: RangeCalendarStateOptions<T>): RangeCalendarState {\n  let {value: valueProp, defaultValue, onChange, createCalendar, locale, visibleDuration = {months: 1}, minValue, maxValue, ...calendarProps} = props;\n  let [value, setValue] = useControlledState<DateRange>(\n    valueProp,\n    defaultValue || null,\n    onChange\n  );\n\n  let [anchorDate, setAnchorDateState] = useState(null);\n  let alignment: 'center' | 'start' = 'center';\n  if (value && value.start && value.end) {\n    let start = alignCenter(toCalendarDate(value.start), visibleDuration, locale, minValue, maxValue);\n    let end = start.add(visibleDuration).subtract({days: 1});\n\n    if (value.end.compare(end) > 0) {\n      alignment = 'start';\n    }\n  }\n\n  // Available range must be stored in a ref so we have access to the updated version immediately in `isInvalid`.\n  let availableRangeRef = useRef<RangeValue<DateValue>>(null);\n  let [availableRange, setAvailableRange] = useState<RangeValue<DateValue>>(null);\n  let min = useMemo(() => maxDate(minValue, availableRange?.start), [minValue, availableRange]);\n  let max = useMemo(() => minDate(maxValue, availableRange?.end), [maxValue, availableRange]);\n\n  let calendar = useCalendarState({\n    ...calendarProps,\n    value: value && value.start,\n    createCalendar,\n    locale,\n    visibleDuration,\n    minValue: min,\n    maxValue: max,\n    selectionAlignment: alignment\n  });\n\n  let updateAvailableRange = (date) => {\n    if (date && props.isDateUnavailable && !props.allowsNonContiguousRanges) {\n      availableRangeRef.current = {\n        start: nextUnavailableDate(date, calendar, -1),\n        end: nextUnavailableDate(date, calendar, 1)\n      };\n      setAvailableRange(availableRangeRef.current);\n    } else {\n      availableRangeRef.current = null;\n      setAvailableRange(null);\n    }\n  };\n\n  // If the visible range changes, we need to update the available range.\n  let [lastVisibleRange, setLastVisibleRange] = useState(calendar.visibleRange);\n  if (!isEqualDay(calendar.visibleRange.start, lastVisibleRange.start) || !isEqualDay(calendar.visibleRange.end, lastVisibleRange.end)) {\n    updateAvailableRange(anchorDate);\n    setLastVisibleRange(calendar.visibleRange);\n  }\n\n  let setAnchorDate = (date: CalendarDate) => {\n    if (date) {\n      setAnchorDateState(date);\n      updateAvailableRange(date);\n    } else {\n      setAnchorDateState(null);\n      updateAvailableRange(null);\n    }\n  };\n\n  let highlightedRange = anchorDate ? makeRange(anchorDate, calendar.focusedDate) : value && makeRange(value.start, value.end);\n  let selectDate = (date: CalendarDate) => {\n    if (props.isReadOnly) {\n      return;\n    }\n\n    date = constrainValue(date, min, max);\n    date = previousAvailableDate(date, calendar.visibleRange.start, props.isDateUnavailable);\n    if (!date) {\n      return;\n    }\n\n    if (!anchorDate) {\n      setAnchorDate(date);\n    } else {\n      let range = makeRange(anchorDate, date);\n      setValue({\n        start: convertValue(range.start, value?.start),\n        end: convertValue(range.end, value?.end)\n      });\n      setAnchorDate(null);\n    }\n  };\n\n  let [isDragging, setDragging] = useState(false);\n\n  let {isDateUnavailable} = props;\n  let isInvalidSelection = useMemo(() => {\n    if (!value || anchorDate) {\n      return false;\n    }\n\n    if (isDateUnavailable && (isDateUnavailable(value.start) || isDateUnavailable(value.end))) {\n      return true;\n    }\n\n    return isInvalid(value.start, minValue, maxValue) || isInvalid(value.end, minValue, maxValue);\n  }, [isDateUnavailable, value, anchorDate, minValue, maxValue]);\n\n  let isValueInvalid = props.isInvalid || props.validationState === 'invalid' || isInvalidSelection;\n  let validationState: ValidationState = isValueInvalid ? 'invalid' : null;\n\n  return {\n    ...calendar,\n    value,\n    setValue,\n    anchorDate,\n    setAnchorDate,\n    highlightedRange,\n    validationState,\n    isValueInvalid,\n    selectFocusedDate() {\n      selectDate(calendar.focusedDate);\n    },\n    selectDate,\n    highlightDate(date) {\n      if (anchorDate) {\n        calendar.setFocusedDate(date);\n      }\n    },\n    isSelected(date) {\n      return highlightedRange && date.compare(highlightedRange.start) >= 0 && date.compare(highlightedRange.end) <= 0 && !calendar.isCellDisabled(date) && !calendar.isCellUnavailable(date);\n    },\n    isInvalid(date) {\n      return calendar.isInvalid(date) || isInvalid(date, availableRangeRef.current?.start, availableRangeRef.current?.end);\n    },\n    isDragging,\n    setDragging\n  };\n}\n\nfunction makeRange(start: DateValue, end: DateValue): RangeValue<CalendarDate> {\n  if (!start || !end) {\n    return null;\n  }\n\n  if (end.compare(start) < 0) {\n    [start, end] = [end, start];\n  }\n\n  return {start: toCalendarDate(start), end: toCalendarDate(end)};\n}\n\nfunction convertValue(newValue: CalendarDate, oldValue: DateValue) {\n  // The display calendar should not have any effect on the emitted value.\n  // Emit dates in the same calendar as the original value, if any, otherwise gregorian.\n  newValue = toCalendar(newValue, oldValue?.calendar || new GregorianCalendar());\n\n  // Preserve time if the input value had one.\n  if (oldValue && 'hour' in oldValue) {\n    return oldValue.set(newValue);\n  }\n\n  return newValue;\n}\n\nfunction nextUnavailableDate(anchorDate: CalendarDate, state: CalendarState, dir: number) {\n  let nextDate = anchorDate.add({days: dir});\n  while (\n    (dir < 0 ? nextDate.compare(state.visibleRange.start) >= 0 : nextDate.compare(state.visibleRange.end) <= 0) &&\n    !state.isCellUnavailable(nextDate)\n  ) {\n    nextDate = nextDate.add({days: dir});\n  }\n\n  if (state.isCellUnavailable(nextDate)) {\n    return nextDate.add({days: -dir});\n  }\n\n  return null;\n}\n"],
  "mappings": "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",
  "names": ["$7G4ZY$useMemo", "$7G4ZY$useState", "$d0gbl$useState", "$d0gbl$useRef", "$d0gbl$useMemo"]
}
