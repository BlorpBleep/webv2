import {
  $453cc9f0df89c0a5$export$77d5aafae4e095b2
} from "./chunk-RH2IMGVB.js";
import {
  $880e95eb8b93ba9a$export$ecf600387e221c37,
  $982254629710d113$export$b95089534ab7c1fd
} from "./chunk-XHJ7TALC.js";
import {
  $628037886ba31236$export$f9d5c8beee7d008d
} from "./chunk-ZTB4BLKD.js";
import {
  $18f2051aff69b9bf$export$43bb16f9c6d9e3f7,
  $fca6afa0e843324b$export$f12b703ca79dfbb1
} from "./chunk-Q5WSF7A2.js";
import {
  $46d819fcbaf35654$export$8f71654801c2f7cd,
  $507fabe10e71c6fb$export$98e20ec92f614cfe,
  $507fabe10e71c6fb$export$b9b3dfddab17db27,
  $6179b936705e76d3$export$ae780daf29e6d456,
  $8a26561d2877236e$export$c24ed0104d07eab9,
  $a1ea59d68270f0dd$export$f8168d8dd8fd66e6,
  $f6c31cce2adf654f$export$45712eceda6fad21
} from "./chunk-354QWSNU.js";
import {
  $3ef42575df84b30b$export$9d1611c77c2fe928,
  $65484d02dcb7eb3e$export$457c3d6518dd4c6f,
  $8ae05eaa5c114e9c$export$7f54fc3180508a52,
  $9daab02d461809db$export$683480f191c0e3ea,
  $bdb11010cef70236$export$b4cc09c592e8fdb8,
  $bdb11010cef70236$export$f680877a34711e37,
  $ea8dcbcb9ea1b556$export$7e924b3091a3bd18,
  $ea8dcbcb9ea1b556$export$9a302a45f65d0572,
  $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c
} from "./chunk-LKOLIFFJ.js";
import {
  require_react
} from "./chunk-74VSPVB3.js";
import {
  __toESM
} from "./chunk-AUZ3RYOM.js";

// ../../node_modules/.pnpm/@react-aria+menu@3.14.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@react-aria/menu/dist/ar-AE.mjs
var $c0398ad35c3639b7$exports = {};
$c0398ad35c3639b7$exports = {
  "longPressMessage": `اضغط مطولاً أو اضغط على Alt + السهم لأسفل لفتح القائمة`
};

// ../../node_modules/.pnpm/@react-aria+menu@3.14.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@react-aria/menu/dist/bg-BG.mjs
var $7af657c4165927c3$exports = {};
$7af657c4165927c3$exports = {
  "longPressMessage": `Натиснете продължително или натиснете Alt+ стрелка надолу, за да отворите менюто`
};

// ../../node_modules/.pnpm/@react-aria+menu@3.14.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@react-aria/menu/dist/cs-CZ.mjs
var $d95d4da6d531ab81$exports = {};
$d95d4da6d531ab81$exports = {
  "longPressMessage": `Dlouhým stiskem nebo stisknutím kláves Alt + šipka dolů otevřete nabídku`
};

// ../../node_modules/.pnpm/@react-aria+menu@3.14.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@react-aria/menu/dist/da-DK.mjs
var $24ebda9c775dca17$exports = {};
$24ebda9c775dca17$exports = {
  "longPressMessage": `Langt tryk eller tryk på Alt + pil ned for at åbne menuen`
};

// ../../node_modules/.pnpm/@react-aria+menu@3.14.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@react-aria/menu/dist/de-DE.mjs
var $743e0dfca6cab1e9$exports = {};
$743e0dfca6cab1e9$exports = {
  "longPressMessage": `Drücken Sie lange oder drücken Sie Alt + Nach-unten, um das Menü zu öffnen`
};

// ../../node_modules/.pnpm/@react-aria+menu@3.14.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@react-aria/menu/dist/el-GR.mjs
var $a2f41026e05f1c84$exports = {};
$a2f41026e05f1c84$exports = {
  "longPressMessage": `Πιέστε παρατεταμένα ή πατήστε Alt + κάτω βέλος για να ανοίξετε το μενού`
};

// ../../node_modules/.pnpm/@react-aria+menu@3.14.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@react-aria/menu/dist/en-US.mjs
var $43b800e97c901737$exports = {};
$43b800e97c901737$exports = {
  "longPressMessage": `Long press or press Alt + ArrowDown to open menu`
};

// ../../node_modules/.pnpm/@react-aria+menu@3.14.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@react-aria/menu/dist/es-ES.mjs
var $442f5f6ac211e29f$exports = {};
$442f5f6ac211e29f$exports = {
  "longPressMessage": `Mantenga pulsado o pulse Alt + flecha abajo para abrir el menú`
};

// ../../node_modules/.pnpm/@react-aria+menu@3.14.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@react-aria/menu/dist/et-EE.mjs
var $dff280acfeb2d8ac$exports = {};
$dff280acfeb2d8ac$exports = {
  "longPressMessage": `Menüü avamiseks vajutage pikalt või vajutage klahve Alt + allanool`
};

// ../../node_modules/.pnpm/@react-aria+menu@3.14.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@react-aria/menu/dist/fi-FI.mjs
var $51608325613944d7$exports = {};
$51608325613944d7$exports = {
  "longPressMessage": `Avaa valikko painamalla pohjassa tai näppäinyhdistelmällä Alt + Alanuoli`
};

// ../../node_modules/.pnpm/@react-aria+menu@3.14.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@react-aria/menu/dist/fr-FR.mjs
var $c4a1b1eabeaa87be$exports = {};
$c4a1b1eabeaa87be$exports = {
  "longPressMessage": `Appuyez de manière prolongée ou appuyez sur Alt + Flèche vers le bas pour ouvrir le menu.`
};

// ../../node_modules/.pnpm/@react-aria+menu@3.14.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@react-aria/menu/dist/he-IL.mjs
var $8c74815cdee18d1b$exports = {};
$8c74815cdee18d1b$exports = {
  "longPressMessage": `לחץ לחיצה ארוכה או הקש Alt + ArrowDown כדי לפתוח את התפריט`
};

// ../../node_modules/.pnpm/@react-aria+menu@3.14.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@react-aria/menu/dist/hr-HR.mjs
var $fd0e9ef6a7fe0ec9$exports = {};
$fd0e9ef6a7fe0ec9$exports = {
  "longPressMessage": `Dugo pritisnite ili pritisnite Alt + strelicu prema dolje za otvaranje izbornika`
};

// ../../node_modules/.pnpm/@react-aria+menu@3.14.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@react-aria/menu/dist/hu-HU.mjs
var $a89a74a39eba465a$exports = {};
$a89a74a39eba465a$exports = {
  "longPressMessage": `Nyomja meg hosszan, vagy nyomja meg az Alt + lefele nyíl gombot a menü megnyitásához`
};

// ../../node_modules/.pnpm/@react-aria+menu@3.14.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@react-aria/menu/dist/it-IT.mjs
var $edc7c66594a0ae8a$exports = {};
$edc7c66594a0ae8a$exports = {
  "longPressMessage": `Premere a lungo o premere Alt + Freccia giù per aprire il menu`
};

// ../../node_modules/.pnpm/@react-aria+menu@3.14.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@react-aria/menu/dist/ja-JP.mjs
var $f1ab51510712db52$exports = {};
$f1ab51510712db52$exports = {
  "longPressMessage": `長押しまたは Alt+下矢印キーでメニューを開く`
};

// ../../node_modules/.pnpm/@react-aria+menu@3.14.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@react-aria/menu/dist/ko-KR.mjs
var $f9b672d9b82fa3d6$exports = {};
$f9b672d9b82fa3d6$exports = {
  "longPressMessage": `길게 누르거나 Alt + 아래쪽 화살표를 눌러 메뉴 열기`
};

// ../../node_modules/.pnpm/@react-aria+menu@3.14.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@react-aria/menu/dist/lt-LT.mjs
var $a385f3910feda499$exports = {};
$a385f3910feda499$exports = {
  "longPressMessage": `Norėdami atidaryti meniu, nuspaudę palaikykite arba paspauskite „Alt + ArrowDown“.`
};

// ../../node_modules/.pnpm/@react-aria+menu@3.14.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@react-aria/menu/dist/lv-LV.mjs
var $4f1bde932c441789$exports = {};
$4f1bde932c441789$exports = {
  "longPressMessage": `Lai atvērtu izvēlni, turiet nospiestu vai nospiediet taustiņu kombināciju Alt + lejupvērstā bultiņa`
};

// ../../node_modules/.pnpm/@react-aria+menu@3.14.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@react-aria/menu/dist/nb-NO.mjs
var $914a51a8a594d5be$exports = {};
$914a51a8a594d5be$exports = {
  "longPressMessage": `Langt trykk eller trykk Alt + PilNed for å åpne menyen`
};

// ../../node_modules/.pnpm/@react-aria+menu@3.14.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@react-aria/menu/dist/nl-NL.mjs
var $89aaf803103bb500$exports = {};
$89aaf803103bb500$exports = {
  "longPressMessage": `Druk lang op Alt + pijl-omlaag of druk op Alt om het menu te openen`
};

// ../../node_modules/.pnpm/@react-aria+menu@3.14.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@react-aria/menu/dist/pl-PL.mjs
var $c685891476dbaaca$exports = {};
$c685891476dbaaca$exports = {
  "longPressMessage": `Naciśnij i przytrzymaj lub naciśnij klawisze Alt + Strzałka w dół, aby otworzyć menu`
};

// ../../node_modules/.pnpm/@react-aria+menu@3.14.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@react-aria/menu/dist/pt-BR.mjs
var $885879b9b10c2959$exports = {};
$885879b9b10c2959$exports = {
  "longPressMessage": `Pressione e segure ou pressione Alt + Seta para baixo para abrir o menu`
};

// ../../node_modules/.pnpm/@react-aria+menu@3.14.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@react-aria/menu/dist/pt-PT.mjs
var $6b39616688a51692$exports = {};
$6b39616688a51692$exports = {
  "longPressMessage": `Prima continuamente ou prima Alt + Seta Para Baixo para abrir o menu`
};

// ../../node_modules/.pnpm/@react-aria+menu@3.14.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@react-aria/menu/dist/ro-RO.mjs
var $f26362aed63f47e2$exports = {};
$f26362aed63f47e2$exports = {
  "longPressMessage": `Apăsați lung sau apăsați pe Alt + săgeată în jos pentru a deschide meniul`
};

// ../../node_modules/.pnpm/@react-aria+menu@3.14.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@react-aria/menu/dist/ru-RU.mjs
var $06cbade644558bf0$exports = {};
$06cbade644558bf0$exports = {
  "longPressMessage": `Нажмите и удерживайте или нажмите Alt + Стрелка вниз, чтобы открыть меню`
};

// ../../node_modules/.pnpm/@react-aria+menu@3.14.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@react-aria/menu/dist/sk-SK.mjs
var $0a391ff68f9d59b1$exports = {};
$0a391ff68f9d59b1$exports = {
  "longPressMessage": `Ponuku otvoríte dlhým stlačením alebo stlačením klávesu Alt + klávesu so šípkou nadol`
};

// ../../node_modules/.pnpm/@react-aria+menu@3.14.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@react-aria/menu/dist/sl-SI.mjs
var $8193cf0e649c7928$exports = {};
$8193cf0e649c7928$exports = {
  "longPressMessage": `Za odprtje menija pritisnite in držite gumb ali pritisnite Alt+puščica navzdol`
};

// ../../node_modules/.pnpm/@react-aria+menu@3.14.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@react-aria/menu/dist/sr-SP.mjs
var $f398debcce5a5c55$exports = {};
$f398debcce5a5c55$exports = {
  "longPressMessage": `Dugo pritisnite ili pritisnite Alt + strelicu prema dole da otvorite meni`
};

// ../../node_modules/.pnpm/@react-aria+menu@3.14.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@react-aria/menu/dist/sv-SE.mjs
var $9e9fef000aa4c013$exports = {};
$9e9fef000aa4c013$exports = {
  "longPressMessage": `Håll nedtryckt eller tryck på Alt + pil nedåt för att öppna menyn`
};

// ../../node_modules/.pnpm/@react-aria+menu@3.14.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@react-aria/menu/dist/tr-TR.mjs
var $c016c8183bbe3d68$exports = {};
$c016c8183bbe3d68$exports = {
  "longPressMessage": `Menüyü açmak için uzun basın veya Alt + Aşağı Ok tuşuna basın`
};

// ../../node_modules/.pnpm/@react-aria+menu@3.14.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@react-aria/menu/dist/uk-UA.mjs
var $ca4f6c8462244e62$exports = {};
$ca4f6c8462244e62$exports = {
  "longPressMessage": `Довго або звичайно натисніть комбінацію клавіш Alt і стрілка вниз, щоб відкрити меню`
};

// ../../node_modules/.pnpm/@react-aria+menu@3.14.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@react-aria/menu/dist/zh-CN.mjs
var $2d9960c02ccac927$exports = {};
$2d9960c02ccac927$exports = {
  "longPressMessage": `长按或按 Alt + 向下方向键以打开菜单`
};

// ../../node_modules/.pnpm/@react-aria+menu@3.14.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@react-aria/menu/dist/zh-TW.mjs
var $f1b682a4c8c5631c$exports = {};
$f1b682a4c8c5631c$exports = {
  "longPressMessage": `長按或按 Alt+向下鍵以開啟功能表`
};

// ../../node_modules/.pnpm/@react-aria+menu@3.14.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@react-aria/menu/dist/intlStrings.mjs
var $2cbb7ca666678a14$exports = {};
$2cbb7ca666678a14$exports = {
  "ar-AE": $c0398ad35c3639b7$exports,
  "bg-BG": $7af657c4165927c3$exports,
  "cs-CZ": $d95d4da6d531ab81$exports,
  "da-DK": $24ebda9c775dca17$exports,
  "de-DE": $743e0dfca6cab1e9$exports,
  "el-GR": $a2f41026e05f1c84$exports,
  "en-US": $43b800e97c901737$exports,
  "es-ES": $442f5f6ac211e29f$exports,
  "et-EE": $dff280acfeb2d8ac$exports,
  "fi-FI": $51608325613944d7$exports,
  "fr-FR": $c4a1b1eabeaa87be$exports,
  "he-IL": $8c74815cdee18d1b$exports,
  "hr-HR": $fd0e9ef6a7fe0ec9$exports,
  "hu-HU": $a89a74a39eba465a$exports,
  "it-IT": $edc7c66594a0ae8a$exports,
  "ja-JP": $f1ab51510712db52$exports,
  "ko-KR": $f9b672d9b82fa3d6$exports,
  "lt-LT": $a385f3910feda499$exports,
  "lv-LV": $4f1bde932c441789$exports,
  "nb-NO": $914a51a8a594d5be$exports,
  "nl-NL": $89aaf803103bb500$exports,
  "pl-PL": $c685891476dbaaca$exports,
  "pt-BR": $885879b9b10c2959$exports,
  "pt-PT": $6b39616688a51692$exports,
  "ro-RO": $f26362aed63f47e2$exports,
  "ru-RU": $06cbade644558bf0$exports,
  "sk-SK": $0a391ff68f9d59b1$exports,
  "sl-SI": $8193cf0e649c7928$exports,
  "sr-SP": $f398debcce5a5c55$exports,
  "sv-SE": $9e9fef000aa4c013$exports,
  "tr-TR": $c016c8183bbe3d68$exports,
  "uk-UA": $ca4f6c8462244e62$exports,
  "zh-CN": $2d9960c02ccac927$exports,
  "zh-TW": $f1b682a4c8c5631c$exports
};

// ../../node_modules/.pnpm/@react-aria+menu@3.14.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@react-aria/menu/dist/useMenuTrigger.mjs
function $parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}
function $168583247155ddda$export$dc9c12ed27dd1b49(props, state, ref) {
  let { type = "menu", isDisabled, trigger = "press" } = props;
  let menuTriggerId = (0, $bdb11010cef70236$export$f680877a34711e37)();
  let { triggerProps, overlayProps } = (0, $628037886ba31236$export$f9d5c8beee7d008d)({
    type
  }, state, ref);
  let onKeyDown = (e) => {
    if (isDisabled)
      return;
    if (trigger === "longPress" && !e.altKey)
      return;
    if (ref && ref.current)
      switch (e.key) {
        case "Enter":
        case " ":
          if (trigger === "longPress")
            return;
        case "ArrowDown":
          if (!("continuePropagation" in e))
            e.stopPropagation();
          e.preventDefault();
          state.toggle("first");
          break;
        case "ArrowUp":
          if (!("continuePropagation" in e))
            e.stopPropagation();
          e.preventDefault();
          state.toggle("last");
          break;
        default:
          if ("continuePropagation" in e)
            e.continuePropagation();
      }
  };
  let stringFormatter = (0, $fca6afa0e843324b$export$f12b703ca79dfbb1)((0, $parcel$interopDefault($2cbb7ca666678a14$exports)), "@react-aria/menu");
  let { longPressProps } = (0, $8a26561d2877236e$export$c24ed0104d07eab9)({
    isDisabled: isDisabled || trigger !== "longPress",
    accessibilityDescription: stringFormatter.format("longPressMessage"),
    onLongPressStart() {
      state.close();
    },
    onLongPress() {
      state.open("first");
    }
  });
  let pressProps = {
    onPressStart(e) {
      if (e.pointerType !== "touch" && e.pointerType !== "keyboard" && !isDisabled)
        state.open(e.pointerType === "virtual" ? "first" : null);
    },
    onPress(e) {
      if (e.pointerType === "touch" && !isDisabled)
        state.toggle();
    }
  };
  delete triggerProps.onPress;
  return {
    menuTriggerProps: {
      ...triggerProps,
      ...trigger === "press" ? pressProps : longPressProps,
      id: menuTriggerId,
      onKeyDown
    },
    menuProps: {
      ...overlayProps,
      "aria-labelledby": menuTriggerId,
      autoFocus: state.focusStrategy || true,
      onClose: state.close
    }
  };
}

// ../../node_modules/.pnpm/@react-aria+menu@3.14.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@react-aria/menu/dist/useMenu.mjs
var $d5336fe17ce95402$export$6f49b4016bfc8d56 = /* @__PURE__ */ new WeakMap();
function $d5336fe17ce95402$export$38eaa17faae8f579(props, state, ref) {
  let { shouldFocusWrap = true, onKeyDown, onKeyUp, ...otherProps } = props;
  if (!props["aria-label"] && !props["aria-labelledby"])
    console.warn("An aria-label or aria-labelledby prop is required for accessibility.");
  let domProps = (0, $65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props, {
    labelable: true
  });
  let { listProps } = (0, $982254629710d113$export$b95089534ab7c1fd)({
    ...otherProps,
    ref,
    selectionManager: state.selectionManager,
    collection: state.collection,
    disabledKeys: state.disabledKeys,
    shouldFocusWrap,
    linkBehavior: "override"
  });
  $d5336fe17ce95402$export$6f49b4016bfc8d56.set(state, {
    onClose: props.onClose,
    onAction: props.onAction
  });
  return {
    menuProps: (0, $3ef42575df84b30b$export$9d1611c77c2fe928)(domProps, {
      onKeyDown,
      onKeyUp
    }, {
      role: "menu",
      ...listProps,
      onKeyDown: (e) => {
        if (e.key !== "Escape")
          listProps.onKeyDown(e);
      }
    })
  };
}

// ../../node_modules/.pnpm/@react-aria+menu@3.14.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@react-aria/menu/dist/useMenuItem.mjs
function $a2e5df62f93c7633$export$9d32628fc2aea7da(props, state, ref) {
  let { key, closeOnSelect, isVirtualized, "aria-haspopup": hasPopup, onPressStart: pressStartProp, onPressUp: pressUpProp, onPress, onPressChange, onPressEnd, onHoverStart: hoverStartProp, onHoverChange, onHoverEnd, onKeyDown, onKeyUp, onFocus, onFocusChange, onBlur } = props;
  let isTrigger = !!hasPopup;
  var _props_isDisabled;
  let isDisabled = (_props_isDisabled = props.isDisabled) !== null && _props_isDisabled !== void 0 ? _props_isDisabled : state.selectionManager.isDisabled(key);
  var _props_isSelected;
  let isSelected = (_props_isSelected = props.isSelected) !== null && _props_isSelected !== void 0 ? _props_isSelected : state.selectionManager.isSelected(key);
  let data = (0, $d5336fe17ce95402$export$6f49b4016bfc8d56).get(state);
  let item = state.collection.getItem(key);
  let onClose = props.onClose || data.onClose;
  let router = (0, $ea8dcbcb9ea1b556$export$9a302a45f65d0572)();
  let performAction = (e) => {
    var _item_props;
    if (isTrigger)
      return;
    if (item === null || item === void 0 ? void 0 : (_item_props = item.props) === null || _item_props === void 0 ? void 0 : _item_props.onAction)
      item.props.onAction();
    if (props.onAction)
      props.onAction(key);
    else if (data.onAction)
      data.onAction(key);
    if (e.target instanceof HTMLAnchorElement)
      router.open(e.target, e, item.props.href, item.props.routerOptions);
  };
  let role = "menuitem";
  if (!isTrigger) {
    if (state.selectionManager.selectionMode === "single")
      role = "menuitemradio";
    else if (state.selectionManager.selectionMode === "multiple")
      role = "menuitemcheckbox";
  }
  let labelId = (0, $bdb11010cef70236$export$b4cc09c592e8fdb8)();
  let descriptionId = (0, $bdb11010cef70236$export$b4cc09c592e8fdb8)();
  let keyboardId = (0, $bdb11010cef70236$export$b4cc09c592e8fdb8)();
  let ariaProps = {
    "aria-disabled": isDisabled || void 0,
    role,
    "aria-label": props["aria-label"],
    "aria-labelledby": labelId,
    "aria-describedby": [
      descriptionId,
      keyboardId
    ].filter(Boolean).join(" ") || void 0,
    "aria-controls": props["aria-controls"],
    "aria-haspopup": hasPopup,
    "aria-expanded": props["aria-expanded"]
  };
  if (state.selectionManager.selectionMode !== "none" && !isTrigger)
    ariaProps["aria-checked"] = isSelected;
  if (isVirtualized) {
    ariaProps["aria-posinset"] = item === null || item === void 0 ? void 0 : item.index;
    ariaProps["aria-setsize"] = (0, $453cc9f0df89c0a5$export$77d5aafae4e095b2)(state.collection);
  }
  let onPressStart = (e) => {
    if (e.pointerType === "keyboard")
      performAction(e);
    pressStartProp === null || pressStartProp === void 0 ? void 0 : pressStartProp(e);
  };
  let onPressUp = (e) => {
    if (e.pointerType !== "keyboard") {
      performAction(e);
      if (!isTrigger && onClose && (closeOnSelect !== null && closeOnSelect !== void 0 ? closeOnSelect : state.selectionManager.selectionMode !== "multiple" || state.selectionManager.isLink(key)))
        onClose();
    }
    pressUpProp === null || pressUpProp === void 0 ? void 0 : pressUpProp(e);
  };
  let { itemProps, isFocused } = (0, $880e95eb8b93ba9a$export$ecf600387e221c37)({
    selectionManager: state.selectionManager,
    key,
    ref,
    shouldSelectOnPressUp: true,
    allowsDifferentPressOrigin: true,
    // Disable all handling of links in useSelectable item
    // because we handle it ourselves. The behavior of menus
    // is slightly different from other collections because
    // actions are performed on key down rather than key up.
    linkBehavior: "none"
  });
  let { pressProps, isPressed } = (0, $f6c31cce2adf654f$export$45712eceda6fad21)({
    onPressStart,
    onPress,
    onPressUp,
    onPressChange,
    onPressEnd,
    isDisabled
  });
  let { hoverProps } = (0, $6179b936705e76d3$export$ae780daf29e6d456)({
    isDisabled,
    onHoverStart(e) {
      if (!(0, $507fabe10e71c6fb$export$b9b3dfddab17db27)()) {
        state.selectionManager.setFocused(true);
        state.selectionManager.setFocusedKey(key);
      }
      hoverStartProp === null || hoverStartProp === void 0 ? void 0 : hoverStartProp(e);
    },
    onHoverChange,
    onHoverEnd
  });
  let { keyboardProps } = (0, $46d819fcbaf35654$export$8f71654801c2f7cd)({
    onKeyDown: (e) => {
      if (e.repeat) {
        e.continuePropagation();
        return;
      }
      switch (e.key) {
        case " ":
          if (!isDisabled && state.selectionManager.selectionMode === "none" && !isTrigger && closeOnSelect !== false && onClose)
            onClose();
          break;
        case "Enter":
          if (!isDisabled && closeOnSelect !== false && !isTrigger && onClose)
            onClose();
          break;
        default:
          if (!isTrigger)
            e.continuePropagation();
          onKeyDown === null || onKeyDown === void 0 ? void 0 : onKeyDown(e);
          break;
      }
    },
    onKeyUp
  });
  let { focusProps } = (0, $a1ea59d68270f0dd$export$f8168d8dd8fd66e6)({
    onBlur,
    onFocus,
    onFocusChange
  });
  let domProps = (0, $65484d02dcb7eb3e$export$457c3d6518dd4c6f)(item.props);
  delete domProps.id;
  let linkProps = (0, $ea8dcbcb9ea1b556$export$7e924b3091a3bd18)(item.props);
  return {
    menuItemProps: {
      ...ariaProps,
      ...(0, $3ef42575df84b30b$export$9d1611c77c2fe928)(domProps, linkProps, isTrigger ? {
        onFocus: itemProps.onFocus,
        "data-key": itemProps["data-key"]
      } : itemProps, pressProps, hoverProps, keyboardProps, focusProps),
      tabIndex: itemProps.tabIndex != null ? -1 : void 0
    },
    labelProps: {
      id: labelId
    },
    descriptionProps: {
      id: descriptionId
    },
    keyboardShortcutProps: {
      id: keyboardId
    },
    isFocused,
    isSelected,
    isPressed,
    isDisabled
  };
}

// ../../node_modules/.pnpm/@react-aria+menu@3.14.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@react-aria/menu/dist/useMenuSection.mjs
function $3e5eb2498db5b506$export$73f7a44322579622(props) {
  let { heading, "aria-label": ariaLabel } = props;
  let headingId = (0, $bdb11010cef70236$export$f680877a34711e37)();
  return {
    itemProps: {
      role: "presentation"
    },
    headingProps: heading ? {
      // Techincally, menus cannot contain headings according to ARIA.
      // We hide the heading from assistive technology, using role="presentation",
      // and only use it as a label for the nested group.
      id: headingId,
      role: "presentation"
    } : {},
    groupProps: {
      role: "group",
      "aria-label": ariaLabel,
      "aria-labelledby": heading ? headingId : void 0
    }
  };
}

// ../../node_modules/.pnpm/@react-aria+menu@3.14.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@react-aria/menu/dist/useSafelyMouseToSubmenu.mjs
var import_react = __toESM(require_react(), 1);
var $d275435c250248f8$var$ALLOWED_INVALID_MOVEMENTS = 2;
var $d275435c250248f8$var$THROTTLE_TIME = 50;
var $d275435c250248f8$var$TIMEOUT_TIME = 1e3;
var $d275435c250248f8$var$ANGLE_PADDING = Math.PI / 12;
function $d275435c250248f8$export$85ec83e04c95f50a(options) {
  let { menuRef, submenuRef, isOpen, isDisabled } = options;
  let prevPointerPos = (0, import_react.useRef)();
  let submenuRect = (0, import_react.useRef)();
  let lastProcessedTime = (0, import_react.useRef)(0);
  let timeout = (0, import_react.useRef)();
  let autoCloseTimeout = (0, import_react.useRef)();
  let submenuSide = (0, import_react.useRef)();
  let movementsTowardsSubmenuCount = (0, import_react.useRef)(2);
  let [preventPointerEvents, setPreventPointerEvents] = (0, import_react.useState)(false);
  let updateSubmenuRect = () => {
    if (submenuRef.current) {
      submenuRect.current = submenuRef.current.getBoundingClientRect();
      submenuSide.current = void 0;
    }
  };
  (0, $9daab02d461809db$export$683480f191c0e3ea)({
    ref: submenuRef,
    onResize: updateSubmenuRect
  });
  let reset = () => {
    setPreventPointerEvents(false);
    movementsTowardsSubmenuCount.current = $d275435c250248f8$var$ALLOWED_INVALID_MOVEMENTS;
    prevPointerPos.current = void 0;
  };
  let modality = (0, $507fabe10e71c6fb$export$98e20ec92f614cfe)();
  (0, import_react.useEffect)(() => {
    if (preventPointerEvents && menuRef.current)
      menuRef.current.style.pointerEvents = "none";
    else
      menuRef.current.style.pointerEvents = "";
  }, [
    menuRef,
    preventPointerEvents
  ]);
  (0, import_react.useEffect)(() => {
    let submenu = submenuRef.current;
    let menu = menuRef.current;
    if (isDisabled || !submenu || !isOpen || modality !== "pointer") {
      reset();
      return;
    }
    submenuRect.current = submenu.getBoundingClientRect();
    let onPointerMove = (e) => {
      if (e.pointerType === "touch" || e.pointerType === "pen")
        return;
      let currentTime = Date.now();
      if (currentTime - lastProcessedTime.current < $d275435c250248f8$var$THROTTLE_TIME)
        return;
      clearTimeout(timeout.current);
      clearTimeout(autoCloseTimeout.current);
      let { clientX: mouseX, clientY: mouseY } = e;
      if (!prevPointerPos.current) {
        prevPointerPos.current = {
          x: mouseX,
          y: mouseY
        };
        return;
      }
      if (!submenuRect.current)
        return;
      if (!submenuSide.current)
        submenuSide.current = mouseX > submenuRect.current.right ? "left" : "right";
      if (mouseX < menu.getBoundingClientRect().left || mouseX > menu.getBoundingClientRect().right || mouseY < menu.getBoundingClientRect().top || mouseY > menu.getBoundingClientRect().bottom) {
        reset();
        return;
      }
      let prevMouseX = prevPointerPos.current.x;
      let prevMouseY = prevPointerPos.current.y;
      let toSubmenuX = submenuSide.current === "right" ? submenuRect.current.left - prevMouseX : prevMouseX - submenuRect.current.right;
      let angleTop = Math.atan2(prevMouseY - submenuRect.current.top, toSubmenuX) + $d275435c250248f8$var$ANGLE_PADDING;
      let angleBottom = Math.atan2(prevMouseY - submenuRect.current.bottom, toSubmenuX) - $d275435c250248f8$var$ANGLE_PADDING;
      let anglePointer = Math.atan2(prevMouseY - mouseY, submenuSide.current === "left" ? -(mouseX - prevMouseX) : mouseX - prevMouseX);
      let isMovingTowardsSubmenu = anglePointer < angleTop && anglePointer > angleBottom;
      movementsTowardsSubmenuCount.current = isMovingTowardsSubmenu ? Math.min(movementsTowardsSubmenuCount.current + 1, $d275435c250248f8$var$ALLOWED_INVALID_MOVEMENTS) : Math.max(movementsTowardsSubmenuCount.current - 1, 0);
      if (movementsTowardsSubmenuCount.current >= $d275435c250248f8$var$ALLOWED_INVALID_MOVEMENTS)
        setPreventPointerEvents(true);
      else
        setPreventPointerEvents(false);
      lastProcessedTime.current = currentTime;
      prevPointerPos.current = {
        x: mouseX,
        y: mouseY
      };
      if (isMovingTowardsSubmenu)
        timeout.current = setTimeout(() => {
          reset();
          autoCloseTimeout.current = setTimeout(() => {
            let target = document.elementFromPoint(mouseX, mouseY);
            if (target && menu.contains(target))
              target.dispatchEvent(new PointerEvent("pointerover", {
                bubbles: true,
                cancelable: true
              }));
          }, 100);
        }, $d275435c250248f8$var$TIMEOUT_TIME);
    };
    window.addEventListener("pointermove", onPointerMove);
    return () => {
      window.removeEventListener("pointermove", onPointerMove);
      clearTimeout(timeout.current);
      clearTimeout(autoCloseTimeout.current);
      movementsTowardsSubmenuCount.current = $d275435c250248f8$var$ALLOWED_INVALID_MOVEMENTS;
    };
  }, [
    isDisabled,
    isOpen,
    menuRef,
    modality,
    setPreventPointerEvents,
    submenuRef
  ]);
}

// ../../node_modules/.pnpm/@react-aria+menu@3.14.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@react-aria/menu/dist/useSubmenuTrigger.mjs
var import_react2 = __toESM(require_react(), 1);
function $0065b146e7192841$export$7138b0d059a6e743(props, state, ref) {
  let { parentMenuRef, submenuRef, type = "menu", isDisabled, node, delay = 200 } = props;
  let submenuTriggerId = (0, $bdb11010cef70236$export$f680877a34711e37)();
  let overlayId = (0, $bdb11010cef70236$export$f680877a34711e37)();
  let { direction } = (0, $18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
  let openTimeout = (0, import_react2.useRef)();
  let cancelOpenTimeout = (0, import_react2.useCallback)(() => {
    if (openTimeout.current) {
      clearTimeout(openTimeout.current);
      openTimeout.current = void 0;
    }
  }, [
    openTimeout
  ]);
  let onSubmenuOpen = (0, $8ae05eaa5c114e9c$export$7f54fc3180508a52)((focusStrategy) => {
    cancelOpenTimeout();
    state.open(focusStrategy);
  });
  let onSubmenuClose = (0, $8ae05eaa5c114e9c$export$7f54fc3180508a52)(() => {
    cancelOpenTimeout();
    state.close();
  });
  (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(() => {
    return () => {
      cancelOpenTimeout();
    };
  }, [
    cancelOpenTimeout
  ]);
  let submenuKeyDown = (e) => {
    switch (e.key) {
      case "ArrowLeft":
        if (direction === "ltr" && e.currentTarget.contains(e.target)) {
          e.stopPropagation();
          onSubmenuClose();
          ref.current.focus();
        }
        break;
      case "ArrowRight":
        if (direction === "rtl" && e.currentTarget.contains(e.target)) {
          e.stopPropagation();
          onSubmenuClose();
          ref.current.focus();
        }
        break;
      case "Escape":
        e.stopPropagation();
        state.closeAll();
        break;
    }
  };
  let submenuProps = {
    id: overlayId,
    "aria-label": node.textValue,
    submenuLevel: state.submenuLevel,
    ...type === "menu" && {
      onClose: state.closeAll,
      autoFocus: state.focusStrategy,
      onKeyDown: submenuKeyDown
    }
  };
  let submenuTriggerKeyDown = (e) => {
    switch (e.key) {
      case "ArrowRight":
        if (!isDisabled) {
          if (direction === "ltr") {
            if (!state.isOpen)
              onSubmenuOpen("first");
            if (type === "menu" && !!(submenuRef === null || submenuRef === void 0 ? void 0 : submenuRef.current) && document.activeElement === (ref === null || ref === void 0 ? void 0 : ref.current))
              submenuRef.current.focus();
          } else if (state.isOpen)
            onSubmenuClose();
          else
            e.continuePropagation();
        }
        break;
      case "ArrowLeft":
        if (!isDisabled) {
          if (direction === "rtl") {
            if (!state.isOpen)
              onSubmenuOpen("first");
            if (type === "menu" && !!(submenuRef === null || submenuRef === void 0 ? void 0 : submenuRef.current) && document.activeElement === (ref === null || ref === void 0 ? void 0 : ref.current))
              submenuRef.current.focus();
          } else if (state.isOpen)
            onSubmenuClose();
          else
            e.continuePropagation();
        }
        break;
      case "Escape":
        state.closeAll();
        break;
      default:
        e.continuePropagation();
        break;
    }
  };
  let onPressStart = (e) => {
    if (!isDisabled && (e.pointerType === "virtual" || e.pointerType === "keyboard"))
      onSubmenuOpen("first");
  };
  let onPress = (e) => {
    if (!isDisabled && (e.pointerType === "touch" || e.pointerType === "mouse"))
      onSubmenuOpen();
  };
  let onHoverChange = (isHovered) => {
    if (!isDisabled) {
      if (isHovered && !state.isOpen) {
        if (!openTimeout.current)
          openTimeout.current = setTimeout(() => {
            onSubmenuOpen();
          }, delay);
      } else if (!isHovered)
        cancelOpenTimeout();
    }
  };
  let onBlur = (e) => {
    if (state.isOpen && parentMenuRef.current.contains(e.relatedTarget))
      onSubmenuClose();
  };
  let shouldCloseOnInteractOutside = (target) => {
    if (target !== ref.current)
      return true;
    return false;
  };
  (0, $d275435c250248f8$export$85ec83e04c95f50a)({
    menuRef: parentMenuRef,
    submenuRef,
    isOpen: state.isOpen,
    isDisabled
  });
  return {
    submenuTriggerProps: {
      id: submenuTriggerId,
      "aria-controls": state.isOpen ? overlayId : void 0,
      "aria-haspopup": !isDisabled ? type : void 0,
      "aria-expanded": state.isOpen ? "true" : "false",
      onPressStart,
      onPress,
      onHoverChange,
      onKeyDown: submenuTriggerKeyDown,
      onBlur,
      isOpen: state.isOpen
    },
    submenuProps,
    popoverProps: {
      isNonModal: true,
      disableFocusManagement: true,
      shouldCloseOnInteractOutside
    }
  };
}

export {
  $168583247155ddda$export$dc9c12ed27dd1b49,
  $d5336fe17ce95402$export$38eaa17faae8f579,
  $a2e5df62f93c7633$export$9d32628fc2aea7da,
  $3e5eb2498db5b506$export$73f7a44322579622,
  $0065b146e7192841$export$7138b0d059a6e743
};
//# sourceMappingURL=chunk-5L2VL4CG.js.map
