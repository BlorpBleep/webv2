import {
  $e6afbd83fe6ebbd2$export$4c014de7c8940b4c,
  $f6c31cce2adf654f$export$45712eceda6fad21
} from "./chunk-2SPRYR4T.js";
import {
  $3ef42575df84b30b$export$9d1611c77c2fe928,
  $65484d02dcb7eb3e$export$457c3d6518dd4c6f,
  $99facab73266f662$export$5add1d006293d136
} from "./chunk-D3NWGKQ3.js";

// ../../node_modules/.pnpm/@react-aria+toggle@3.10.7_react@18.3.1/node_modules/@react-aria/toggle/dist/useToggle.mjs
function $d2c8e2b0480f3f34$export$cbe85ee05b554577(props, state, ref) {
  let { isDisabled = false, isReadOnly = false, value, name, children, "aria-label": ariaLabel, "aria-labelledby": ariaLabelledby, validationState = "valid", isInvalid } = props;
  let onChange = (e) => {
    e.stopPropagation();
    state.setSelected(e.target.checked);
  };
  let hasChildren = children != null;
  let hasAriaLabel = ariaLabel != null || ariaLabelledby != null;
  if (!hasChildren && !hasAriaLabel)
    console.warn("If you do not provide children, you must specify an aria-label for accessibility");
  let { pressProps, isPressed } = (0, $f6c31cce2adf654f$export$45712eceda6fad21)({
    isDisabled
  });
  let { pressProps: labelProps, isPressed: isLabelPressed } = (0, $f6c31cce2adf654f$export$45712eceda6fad21)({
    isDisabled: isDisabled || isReadOnly,
    onPress() {
      state.toggle();
    }
  });
  let { focusableProps } = (0, $e6afbd83fe6ebbd2$export$4c014de7c8940b4c)(props, ref);
  let interactions = (0, $3ef42575df84b30b$export$9d1611c77c2fe928)(pressProps, focusableProps);
  let domProps = (0, $65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props, {
    labelable: true
  });
  (0, $99facab73266f662$export$5add1d006293d136)(ref, state.isSelected, state.setSelected);
  return {
    labelProps: (0, $3ef42575df84b30b$export$9d1611c77c2fe928)(labelProps, {
      onClick: (e) => e.preventDefault()
    }),
    inputProps: (0, $3ef42575df84b30b$export$9d1611c77c2fe928)(domProps, {
      "aria-invalid": isInvalid || validationState === "invalid" || void 0,
      "aria-errormessage": props["aria-errormessage"],
      "aria-controls": props["aria-controls"],
      "aria-readonly": isReadOnly || void 0,
      onChange,
      disabled: isDisabled,
      ...value == null ? {} : {
        value
      },
      name,
      type: "checkbox",
      ...interactions
    }),
    isSelected: state.isSelected,
    isPressed: isPressed || isLabelPressed,
    isDisabled,
    isReadOnly,
    isInvalid: isInvalid || validationState === "invalid"
  };
}

export {
  $d2c8e2b0480f3f34$export$cbe85ee05b554577
};
//# sourceMappingURL=chunk-ENU5XUMG.js.map
