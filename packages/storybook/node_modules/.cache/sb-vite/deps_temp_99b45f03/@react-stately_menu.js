import {
  $fc909762b330b746$export$61c6a8c84e605fb6
} from "./chunk-QJZHV4QA.js";
import "./chunk-JKZVH6V4.js";
import {
  require_react
} from "./chunk-74VSPVB3.js";
import {
  __toESM
} from "./chunk-AUZ3RYOM.js";

// ../../node_modules/.pnpm/@react-stately+menu@3.7.1_react@18.3.1/node_modules/@react-stately/menu/dist/useMenuTriggerState.mjs
var import_react = __toESM(require_react(), 1);
function $a28c903ee9ad8dc5$export$79fefeb1c2091ac3(props) {
  let overlayTriggerState = (0, $fc909762b330b746$export$61c6a8c84e605fb6)(props);
  let [focusStrategy, setFocusStrategy] = (0, import_react.useState)(null);
  let [expandedKeysStack, setExpandedKeysStack] = (0, import_react.useState)([]);
  let closeAll = () => {
    setExpandedKeysStack([]);
    overlayTriggerState.close();
  };
  let openSubmenu = (triggerKey, level) => {
    setExpandedKeysStack((oldStack) => {
      if (level > oldStack.length)
        return oldStack;
      return [
        ...oldStack.slice(0, level),
        triggerKey
      ];
    });
  };
  let closeSubmenu = (triggerKey, level) => {
    setExpandedKeysStack((oldStack) => {
      let key = oldStack[level];
      if (key === triggerKey)
        return oldStack.slice(0, level);
      else
        return oldStack;
    });
  };
  return {
    focusStrategy,
    ...overlayTriggerState,
    open(focusStrategy2 = null) {
      setFocusStrategy(focusStrategy2);
      overlayTriggerState.open();
    },
    toggle(focusStrategy2 = null) {
      setFocusStrategy(focusStrategy2);
      overlayTriggerState.toggle();
    },
    close() {
      closeAll();
    },
    expandedKeysStack,
    openSubmenu,
    closeSubmenu
  };
}

// ../../node_modules/.pnpm/@react-stately+menu@3.7.1_react@18.3.1/node_modules/@react-stately/menu/dist/useSubmenuTriggerState.mjs
var import_react2 = __toESM(require_react(), 1);
function $e5614764aa47eb35$export$cfc51cf86138bf98(props, state) {
  let { triggerKey } = props;
  let { expandedKeysStack, openSubmenu, closeSubmenu, close: closeAll } = state;
  let [submenuLevel] = (0, import_react2.useState)(expandedKeysStack === null || expandedKeysStack === void 0 ? void 0 : expandedKeysStack.length);
  let isOpen = (0, import_react2.useMemo)(() => expandedKeysStack[submenuLevel] === triggerKey, [
    expandedKeysStack,
    triggerKey,
    submenuLevel
  ]);
  let [focusStrategy, setFocusStrategy] = (0, import_react2.useState)(null);
  let open = (0, import_react2.useCallback)((focusStrategy2 = null) => {
    setFocusStrategy(focusStrategy2);
    openSubmenu(triggerKey, submenuLevel);
  }, [
    openSubmenu,
    submenuLevel,
    triggerKey
  ]);
  let close = (0, import_react2.useCallback)(() => {
    setFocusStrategy(null);
    closeSubmenu(triggerKey, submenuLevel);
  }, [
    closeSubmenu,
    submenuLevel,
    triggerKey
  ]);
  let toggle = (0, import_react2.useCallback)((focusStrategy2 = null) => {
    setFocusStrategy(focusStrategy2);
    if (isOpen)
      close();
    else
      open(focusStrategy2);
  }, [
    close,
    open,
    isOpen
  ]);
  return (0, import_react2.useMemo)(() => ({
    focusStrategy,
    isOpen,
    open,
    close,
    closeAll,
    submenuLevel,
    // TODO: Placeholders that aren't used but give us parity with OverlayTriggerState so we can use this in Popover. Refactor if we update Popover via
    // https://github.com/adobe/react-spectrum/pull/4976#discussion_r1336472863
    setOpen: () => {
    },
    toggle
  }), [
    isOpen,
    open,
    close,
    closeAll,
    focusStrategy,
    toggle,
    submenuLevel
  ]);
}
export {
  $a28c903ee9ad8dc5$export$79fefeb1c2091ac3 as useMenuTriggerState,
  $e5614764aa47eb35$export$cfc51cf86138bf98 as useSubmenuTriggerState
};
//# sourceMappingURL=@react-stately_menu.js.map
